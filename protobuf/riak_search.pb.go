// Code generated by protoc-gen-go.
// source: riak_search.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpbSearchDoc struct {
	Fields           []*RpbPair `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *RpbSearchDoc) Reset()                    { *m = RpbSearchDoc{} }
func (m *RpbSearchDoc) String() string            { return proto.CompactTextString(m) }
func (*RpbSearchDoc) ProtoMessage()               {}
func (*RpbSearchDoc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RpbSearchDoc) GetFields() []*RpbPair {
	if m != nil {
		return m.Fields
	}
	return nil
}

type RpbSearchQueryReq struct {
	Q                []byte   `protobuf:"bytes,1,req,name=q" json:"q,omitempty"`
	Index            []byte   `protobuf:"bytes,2,req,name=index" json:"index,omitempty"`
	Rows             *uint32  `protobuf:"varint,3,opt,name=rows" json:"rows,omitempty"`
	Start            *uint32  `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	Sort             []byte   `protobuf:"bytes,5,opt,name=sort" json:"sort,omitempty"`
	Filter           []byte   `protobuf:"bytes,6,opt,name=filter" json:"filter,omitempty"`
	Df               []byte   `protobuf:"bytes,7,opt,name=df" json:"df,omitempty"`
	Op               []byte   `protobuf:"bytes,8,opt,name=op" json:"op,omitempty"`
	Fl               [][]byte `protobuf:"bytes,9,rep,name=fl" json:"fl,omitempty"`
	Presort          []byte   `protobuf:"bytes,10,opt,name=presort" json:"presort,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RpbSearchQueryReq) Reset()                    { *m = RpbSearchQueryReq{} }
func (m *RpbSearchQueryReq) String() string            { return proto.CompactTextString(m) }
func (*RpbSearchQueryReq) ProtoMessage()               {}
func (*RpbSearchQueryReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RpbSearchQueryReq) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RpbSearchQueryReq) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *RpbSearchQueryReq) GetRows() uint32 {
	if m != nil && m.Rows != nil {
		return *m.Rows
	}
	return 0
}

func (m *RpbSearchQueryReq) GetStart() uint32 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *RpbSearchQueryReq) GetSort() []byte {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *RpbSearchQueryReq) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *RpbSearchQueryReq) GetDf() []byte {
	if m != nil {
		return m.Df
	}
	return nil
}

func (m *RpbSearchQueryReq) GetOp() []byte {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *RpbSearchQueryReq) GetFl() [][]byte {
	if m != nil {
		return m.Fl
	}
	return nil
}

func (m *RpbSearchQueryReq) GetPresort() []byte {
	if m != nil {
		return m.Presort
	}
	return nil
}

type RpbSearchQueryResp struct {
	Docs             []*RpbSearchDoc `protobuf:"bytes,1,rep,name=docs" json:"docs,omitempty"`
	MaxScore         *float32        `protobuf:"fixed32,2,opt,name=max_score" json:"max_score,omitempty"`
	NumFound         *uint32         `protobuf:"varint,3,opt,name=num_found" json:"num_found,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RpbSearchQueryResp) Reset()                    { *m = RpbSearchQueryResp{} }
func (m *RpbSearchQueryResp) String() string            { return proto.CompactTextString(m) }
func (*RpbSearchQueryResp) ProtoMessage()               {}
func (*RpbSearchQueryResp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *RpbSearchQueryResp) GetDocs() []*RpbSearchDoc {
	if m != nil {
		return m.Docs
	}
	return nil
}

func (m *RpbSearchQueryResp) GetMaxScore() float32 {
	if m != nil && m.MaxScore != nil {
		return *m.MaxScore
	}
	return 0
}

func (m *RpbSearchQueryResp) GetNumFound() uint32 {
	if m != nil && m.NumFound != nil {
		return *m.NumFound
	}
	return 0
}

func init() {
	proto.RegisterType((*RpbSearchDoc)(nil), "protobuf.RpbSearchDoc")
	proto.RegisterType((*RpbSearchQueryReq)(nil), "protobuf.RpbSearchQueryReq")
	proto.RegisterType((*RpbSearchQueryResp)(nil), "protobuf.RpbSearchQueryResp")
}

var fileDescriptor3 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x5f, 0x4e, 0x84, 0x30,
	0x10, 0xc6, 0x03, 0xcb, 0xfe, 0x61, 0xec, 0x6a, 0xe8, 0x83, 0x36, 0x3e, 0xad, 0xc4, 0x44, 0x9e,
	0x48, 0xf4, 0x08, 0xc4, 0x03, 0xac, 0x78, 0x00, 0x2c, 0x50, 0xb2, 0x44, 0x60, 0xd8, 0x16, 0xe2,
	0x7a, 0x18, 0xef, 0x6a, 0x5b, 0x82, 0x1b, 0xf7, 0x89, 0xf9, 0xcd, 0x37, 0x33, 0x7c, 0x5f, 0x21,
	0x90, 0x35, 0xff, 0xcc, 0x94, 0xe0, 0xb2, 0x38, 0xc4, 0xbd, 0xc4, 0x01, 0xe9, 0xc6, 0x7e, 0xf2,
	0xb1, 0xba, 0x07, 0x23, 0x4e, 0xdd, 0xf0, 0x19, 0x48, 0xda, 0xe7, 0xef, 0x76, 0xf0, 0x15, 0x0b,
	0xfa, 0x00, 0xab, 0xaa, 0x16, 0x4d, 0xa9, 0x98, 0xb3, 0x5b, 0x44, 0x57, 0x2f, 0x41, 0x3c, 0xaf,
	0xc5, 0x7a, 0x6e, 0xcf, 0x6b, 0x19, 0xfe, 0x38, 0x10, 0xfc, 0xed, 0xbc, 0x8d, 0x42, 0x7e, 0xa7,
	0xe2, 0x48, 0x7d, 0x70, 0x8e, 0x7a, 0xc7, 0x8d, 0x08, 0xdd, 0xc2, 0xb2, 0xee, 0x4a, 0x71, 0x62,
	0xae, 0x45, 0x02, 0x9e, 0xc4, 0x2f, 0xc5, 0x16, 0x3b, 0x27, 0xda, 0x1a, 0x51, 0x0d, 0x5c, 0x0e,
	0xcc, 0xb3, 0xa8, 0x45, 0x85, 0x9a, 0x96, 0x9a, 0x08, 0xbd, 0x36, 0x7f, 0x6f, 0x06, 0x21, 0xd9,
	0xca, 0x32, 0x80, 0x5b, 0x56, 0x6c, 0x3d, 0xd7, 0xd8, 0xb3, 0xcd, 0x5c, 0x57, 0x0d, 0xf3, 0xb5,
	0x43, 0x42, 0x6f, 0x60, 0xdd, 0x4b, 0x61, 0x8f, 0x80, 0x11, 0xc3, 0x0f, 0xa0, 0x97, 0xf6, 0x54,
	0x4f, 0x1f, 0xc1, 0x2b, 0xb1, 0x98, 0x63, 0xdd, 0xfe, 0x8b, 0x75, 0x8e, 0x1f, 0x80, 0xdf, 0xf2,
	0x53, 0xa6, 0x0a, 0x94, 0x42, 0xdb, 0x77, 0x22, 0xd7, 0xb4, 0xba, 0xb1, 0xcd, 0x2a, 0x1c, 0xbb,
	0x72, 0xca, 0x90, 0x3c, 0xc1, 0x5d, 0x81, 0x6d, 0x9c, 0x73, 0x75, 0xc0, 0xf8, 0xfc, 0x98, 0xfa,
	0x5a, 0x42, 0x52, 0x8d, 0xd3, 0xbd, 0x7d, 0xf2, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x48, 0x32, 0x3d,
	0xec, 0x87, 0x01, 0x00, 0x00,
}
