// Code generated by protoc-gen-go.
// source: riak_kv.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpbIndexReq_IndexQueryType int32

const (
	RpbIndexReq_eq    RpbIndexReq_IndexQueryType = 0
	RpbIndexReq_range RpbIndexReq_IndexQueryType = 1
)

var RpbIndexReq_IndexQueryType_name = map[int32]string{
	0: "eq",
	1: "range",
}
var RpbIndexReq_IndexQueryType_value = map[string]int32{
	"eq":    0,
	"range": 1,
}

func (x RpbIndexReq_IndexQueryType) Enum() *RpbIndexReq_IndexQueryType {
	p := new(RpbIndexReq_IndexQueryType)
	*p = x
	return p
}
func (x RpbIndexReq_IndexQueryType) String() string {
	return proto.EnumName(RpbIndexReq_IndexQueryType_name, int32(x))
}
func (x *RpbIndexReq_IndexQueryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpbIndexReq_IndexQueryType_value, data, "RpbIndexReq_IndexQueryType")
	if err != nil {
		return err
	}
	*x = RpbIndexReq_IndexQueryType(value)
	return nil
}
func (RpbIndexReq_IndexQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{13, 0}
}

// Get ClientId Request - no message defined, just send RpbGetClientIdReq message code
type RpbGetClientIdResp struct {
	ClientId         []byte `protobuf:"bytes,1,req,name=client_id" json:"client_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbGetClientIdResp) Reset()                    { *m = RpbGetClientIdResp{} }
func (m *RpbGetClientIdResp) String() string            { return proto.CompactTextString(m) }
func (*RpbGetClientIdResp) ProtoMessage()               {}
func (*RpbGetClientIdResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RpbGetClientIdResp) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

type RpbSetClientIdReq struct {
	ClientId         []byte `protobuf:"bytes,1,req,name=client_id" json:"client_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbSetClientIdReq) Reset()                    { *m = RpbSetClientIdReq{} }
func (m *RpbSetClientIdReq) String() string            { return proto.CompactTextString(m) }
func (*RpbSetClientIdReq) ProtoMessage()               {}
func (*RpbSetClientIdReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RpbSetClientIdReq) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

// Get Request - retrieve bucket/key
type RpbGetReq struct {
	Bucket           []byte  `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Key              []byte  `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	R                *uint32 `protobuf:"varint,3,opt,name=r" json:"r,omitempty"`
	Pr               *uint32 `protobuf:"varint,4,opt,name=pr" json:"pr,omitempty"`
	BasicQuorum      *bool   `protobuf:"varint,5,opt,name=basic_quorum" json:"basic_quorum,omitempty"`
	NotfoundOk       *bool   `protobuf:"varint,6,opt,name=notfound_ok" json:"notfound_ok,omitempty"`
	IfModified       []byte  `protobuf:"bytes,7,opt,name=if_modified" json:"if_modified,omitempty"`
	Head             *bool   `protobuf:"varint,8,opt,name=head" json:"head,omitempty"`
	Deletedvclock    *bool   `protobuf:"varint,9,opt,name=deletedvclock" json:"deletedvclock,omitempty"`
	Timeout          *uint32 `protobuf:"varint,10,opt,name=timeout" json:"timeout,omitempty"`
	SloppyQuorum     *bool   `protobuf:"varint,11,opt,name=sloppy_quorum" json:"sloppy_quorum,omitempty"`
	NVal             *uint32 `protobuf:"varint,12,opt,name=n_val" json:"n_val,omitempty"`
	Type             []byte  `protobuf:"bytes,13,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbGetReq) Reset()                    { *m = RpbGetReq{} }
func (m *RpbGetReq) String() string            { return proto.CompactTextString(m) }
func (*RpbGetReq) ProtoMessage()               {}
func (*RpbGetReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RpbGetReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbGetReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbGetReq) GetR() uint32 {
	if m != nil && m.R != nil {
		return *m.R
	}
	return 0
}

func (m *RpbGetReq) GetPr() uint32 {
	if m != nil && m.Pr != nil {
		return *m.Pr
	}
	return 0
}

func (m *RpbGetReq) GetBasicQuorum() bool {
	if m != nil && m.BasicQuorum != nil {
		return *m.BasicQuorum
	}
	return false
}

func (m *RpbGetReq) GetNotfoundOk() bool {
	if m != nil && m.NotfoundOk != nil {
		return *m.NotfoundOk
	}
	return false
}

func (m *RpbGetReq) GetIfModified() []byte {
	if m != nil {
		return m.IfModified
	}
	return nil
}

func (m *RpbGetReq) GetHead() bool {
	if m != nil && m.Head != nil {
		return *m.Head
	}
	return false
}

func (m *RpbGetReq) GetDeletedvclock() bool {
	if m != nil && m.Deletedvclock != nil {
		return *m.Deletedvclock
	}
	return false
}

func (m *RpbGetReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbGetReq) GetSloppyQuorum() bool {
	if m != nil && m.SloppyQuorum != nil {
		return *m.SloppyQuorum
	}
	return false
}

func (m *RpbGetReq) GetNVal() uint32 {
	if m != nil && m.NVal != nil {
		return *m.NVal
	}
	return 0
}

func (m *RpbGetReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// Get Response - if the record was not found there will be no content/vclock
type RpbGetResp struct {
	Content          []*RpbContent `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
	Vclock           []byte        `protobuf:"bytes,2,opt,name=vclock" json:"vclock,omitempty"`
	Unchanged        *bool         `protobuf:"varint,3,opt,name=unchanged" json:"unchanged,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RpbGetResp) Reset()                    { *m = RpbGetResp{} }
func (m *RpbGetResp) String() string            { return proto.CompactTextString(m) }
func (*RpbGetResp) ProtoMessage()               {}
func (*RpbGetResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RpbGetResp) GetContent() []*RpbContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RpbGetResp) GetVclock() []byte {
	if m != nil {
		return m.Vclock
	}
	return nil
}

func (m *RpbGetResp) GetUnchanged() bool {
	if m != nil && m.Unchanged != nil {
		return *m.Unchanged
	}
	return false
}

// Put request - if options.return_body is set then the updated metadata/data for
//               the key will be returned.
type RpbPutReq struct {
	Bucket           []byte      `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Key              []byte      `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Vclock           []byte      `protobuf:"bytes,3,opt,name=vclock" json:"vclock,omitempty"`
	Content          *RpbContent `protobuf:"bytes,4,req,name=content" json:"content,omitempty"`
	W                *uint32     `protobuf:"varint,5,opt,name=w" json:"w,omitempty"`
	Dw               *uint32     `protobuf:"varint,6,opt,name=dw" json:"dw,omitempty"`
	ReturnBody       *bool       `protobuf:"varint,7,opt,name=return_body" json:"return_body,omitempty"`
	Pw               *uint32     `protobuf:"varint,8,opt,name=pw" json:"pw,omitempty"`
	IfNotModified    *bool       `protobuf:"varint,9,opt,name=if_not_modified" json:"if_not_modified,omitempty"`
	IfNoneMatch      *bool       `protobuf:"varint,10,opt,name=if_none_match" json:"if_none_match,omitempty"`
	ReturnHead       *bool       `protobuf:"varint,11,opt,name=return_head" json:"return_head,omitempty"`
	Timeout          *uint32     `protobuf:"varint,12,opt,name=timeout" json:"timeout,omitempty"`
	Asis             *bool       `protobuf:"varint,13,opt,name=asis" json:"asis,omitempty"`
	SloppyQuorum     *bool       `protobuf:"varint,14,opt,name=sloppy_quorum" json:"sloppy_quorum,omitempty"`
	NVal             *uint32     `protobuf:"varint,15,opt,name=n_val" json:"n_val,omitempty"`
	Type             []byte      `protobuf:"bytes,16,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RpbPutReq) Reset()                    { *m = RpbPutReq{} }
func (m *RpbPutReq) String() string            { return proto.CompactTextString(m) }
func (*RpbPutReq) ProtoMessage()               {}
func (*RpbPutReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RpbPutReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbPutReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbPutReq) GetVclock() []byte {
	if m != nil {
		return m.Vclock
	}
	return nil
}

func (m *RpbPutReq) GetContent() *RpbContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RpbPutReq) GetW() uint32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *RpbPutReq) GetDw() uint32 {
	if m != nil && m.Dw != nil {
		return *m.Dw
	}
	return 0
}

func (m *RpbPutReq) GetReturnBody() bool {
	if m != nil && m.ReturnBody != nil {
		return *m.ReturnBody
	}
	return false
}

func (m *RpbPutReq) GetPw() uint32 {
	if m != nil && m.Pw != nil {
		return *m.Pw
	}
	return 0
}

func (m *RpbPutReq) GetIfNotModified() bool {
	if m != nil && m.IfNotModified != nil {
		return *m.IfNotModified
	}
	return false
}

func (m *RpbPutReq) GetIfNoneMatch() bool {
	if m != nil && m.IfNoneMatch != nil {
		return *m.IfNoneMatch
	}
	return false
}

func (m *RpbPutReq) GetReturnHead() bool {
	if m != nil && m.ReturnHead != nil {
		return *m.ReturnHead
	}
	return false
}

func (m *RpbPutReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbPutReq) GetAsis() bool {
	if m != nil && m.Asis != nil {
		return *m.Asis
	}
	return false
}

func (m *RpbPutReq) GetSloppyQuorum() bool {
	if m != nil && m.SloppyQuorum != nil {
		return *m.SloppyQuorum
	}
	return false
}

func (m *RpbPutReq) GetNVal() uint32 {
	if m != nil && m.NVal != nil {
		return *m.NVal
	}
	return 0
}

func (m *RpbPutReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// Put response - same as get response with optional key if one was generated
type RpbPutResp struct {
	Content          []*RpbContent `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
	Vclock           []byte        `protobuf:"bytes,2,opt,name=vclock" json:"vclock,omitempty"`
	Key              []byte        `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RpbPutResp) Reset()                    { *m = RpbPutResp{} }
func (m *RpbPutResp) String() string            { return proto.CompactTextString(m) }
func (*RpbPutResp) ProtoMessage()               {}
func (*RpbPutResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RpbPutResp) GetContent() []*RpbContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RpbPutResp) GetVclock() []byte {
	if m != nil {
		return m.Vclock
	}
	return nil
}

func (m *RpbPutResp) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// Delete request
type RpbDelReq struct {
	Bucket           []byte  `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Key              []byte  `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	Rw               *uint32 `protobuf:"varint,3,opt,name=rw" json:"rw,omitempty"`
	Vclock           []byte  `protobuf:"bytes,4,opt,name=vclock" json:"vclock,omitempty"`
	R                *uint32 `protobuf:"varint,5,opt,name=r" json:"r,omitempty"`
	W                *uint32 `protobuf:"varint,6,opt,name=w" json:"w,omitempty"`
	Pr               *uint32 `protobuf:"varint,7,opt,name=pr" json:"pr,omitempty"`
	Pw               *uint32 `protobuf:"varint,8,opt,name=pw" json:"pw,omitempty"`
	Dw               *uint32 `protobuf:"varint,9,opt,name=dw" json:"dw,omitempty"`
	Timeout          *uint32 `protobuf:"varint,10,opt,name=timeout" json:"timeout,omitempty"`
	SloppyQuorum     *bool   `protobuf:"varint,11,opt,name=sloppy_quorum" json:"sloppy_quorum,omitempty"`
	NVal             *uint32 `protobuf:"varint,12,opt,name=n_val" json:"n_val,omitempty"`
	Type             []byte  `protobuf:"bytes,13,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbDelReq) Reset()                    { *m = RpbDelReq{} }
func (m *RpbDelReq) String() string            { return proto.CompactTextString(m) }
func (*RpbDelReq) ProtoMessage()               {}
func (*RpbDelReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RpbDelReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbDelReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbDelReq) GetRw() uint32 {
	if m != nil && m.Rw != nil {
		return *m.Rw
	}
	return 0
}

func (m *RpbDelReq) GetVclock() []byte {
	if m != nil {
		return m.Vclock
	}
	return nil
}

func (m *RpbDelReq) GetR() uint32 {
	if m != nil && m.R != nil {
		return *m.R
	}
	return 0
}

func (m *RpbDelReq) GetW() uint32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *RpbDelReq) GetPr() uint32 {
	if m != nil && m.Pr != nil {
		return *m.Pr
	}
	return 0
}

func (m *RpbDelReq) GetPw() uint32 {
	if m != nil && m.Pw != nil {
		return *m.Pw
	}
	return 0
}

func (m *RpbDelReq) GetDw() uint32 {
	if m != nil && m.Dw != nil {
		return *m.Dw
	}
	return 0
}

func (m *RpbDelReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbDelReq) GetSloppyQuorum() bool {
	if m != nil && m.SloppyQuorum != nil {
		return *m.SloppyQuorum
	}
	return false
}

func (m *RpbDelReq) GetNVal() uint32 {
	if m != nil && m.NVal != nil {
		return *m.NVal
	}
	return 0
}

func (m *RpbDelReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// List buckets request
type RpbListBucketsReq struct {
	Timeout          *uint32 `protobuf:"varint,1,opt,name=timeout" json:"timeout,omitempty"`
	Stream           *bool   `protobuf:"varint,2,opt,name=stream" json:"stream,omitempty"`
	Type             []byte  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbListBucketsReq) Reset()                    { *m = RpbListBucketsReq{} }
func (m *RpbListBucketsReq) String() string            { return proto.CompactTextString(m) }
func (*RpbListBucketsReq) ProtoMessage()               {}
func (*RpbListBucketsReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RpbListBucketsReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbListBucketsReq) GetStream() bool {
	if m != nil && m.Stream != nil {
		return *m.Stream
	}
	return false
}

func (m *RpbListBucketsReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// List buckets response - one or more of these packets will be sent
// the last one will have done set true (and may not have any buckets in it)
type RpbListBucketsResp struct {
	Buckets          [][]byte `protobuf:"bytes,1,rep,name=buckets" json:"buckets,omitempty"`
	Done             *bool    `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RpbListBucketsResp) Reset()                    { *m = RpbListBucketsResp{} }
func (m *RpbListBucketsResp) String() string            { return proto.CompactTextString(m) }
func (*RpbListBucketsResp) ProtoMessage()               {}
func (*RpbListBucketsResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *RpbListBucketsResp) GetBuckets() [][]byte {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *RpbListBucketsResp) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

// List keys in bucket request
type RpbListKeysReq struct {
	Bucket           []byte  `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Timeout          *uint32 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	Type             []byte  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbListKeysReq) Reset()                    { *m = RpbListKeysReq{} }
func (m *RpbListKeysReq) String() string            { return proto.CompactTextString(m) }
func (*RpbListKeysReq) ProtoMessage()               {}
func (*RpbListKeysReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RpbListKeysReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbListKeysReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbListKeysReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// List keys in bucket response - one or more of these packets will be sent
// the last one will have done set true (and may not have any keys in it)
type RpbListKeysResp struct {
	Keys             [][]byte `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Done             *bool    `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RpbListKeysResp) Reset()                    { *m = RpbListKeysResp{} }
func (m *RpbListKeysResp) String() string            { return proto.CompactTextString(m) }
func (*RpbListKeysResp) ProtoMessage()               {}
func (*RpbListKeysResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *RpbListKeysResp) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RpbListKeysResp) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

// Map/Reduce request
type RpbMapRedReq struct {
	Request          []byte `protobuf:"bytes,1,req,name=request" json:"request,omitempty"`
	ContentType      []byte `protobuf:"bytes,2,req,name=content_type" json:"content_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbMapRedReq) Reset()                    { *m = RpbMapRedReq{} }
func (m *RpbMapRedReq) String() string            { return proto.CompactTextString(m) }
func (*RpbMapRedReq) ProtoMessage()               {}
func (*RpbMapRedReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *RpbMapRedReq) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RpbMapRedReq) GetContentType() []byte {
	if m != nil {
		return m.ContentType
	}
	return nil
}

// Map/Reduce response
// one or more of these packets will be sent the last one will have done set
// true (and may not have phase/data in it)
type RpbMapRedResp struct {
	Phase            *uint32 `protobuf:"varint,1,opt,name=phase" json:"phase,omitempty"`
	Response         []byte  `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	Done             *bool   `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbMapRedResp) Reset()                    { *m = RpbMapRedResp{} }
func (m *RpbMapRedResp) String() string            { return proto.CompactTextString(m) }
func (*RpbMapRedResp) ProtoMessage()               {}
func (*RpbMapRedResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *RpbMapRedResp) GetPhase() uint32 {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return 0
}

func (m *RpbMapRedResp) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RpbMapRedResp) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

// Secondary Index query request
type RpbIndexReq struct {
	Bucket       []byte                      `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Index        []byte                      `protobuf:"bytes,2,req,name=index" json:"index,omitempty"`
	Qtype        *RpbIndexReq_IndexQueryType `protobuf:"varint,3,req,name=qtype,enum=protobuf.RpbIndexReq_IndexQueryType" json:"qtype,omitempty"`
	Key          []byte                      `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	RangeMin     []byte                      `protobuf:"bytes,5,opt,name=range_min" json:"range_min,omitempty"`
	RangeMax     []byte                      `protobuf:"bytes,6,opt,name=range_max" json:"range_max,omitempty"`
	ReturnTerms  *bool                       `protobuf:"varint,7,opt,name=return_terms" json:"return_terms,omitempty"`
	Stream       *bool                       `protobuf:"varint,8,opt,name=stream" json:"stream,omitempty"`
	MaxResults   *uint32                     `protobuf:"varint,9,opt,name=max_results" json:"max_results,omitempty"`
	Continuation []byte                      `protobuf:"bytes,10,opt,name=continuation" json:"continuation,omitempty"`
	Timeout      *uint32                     `protobuf:"varint,11,opt,name=timeout" json:"timeout,omitempty"`
	Type         []byte                      `protobuf:"bytes,12,opt,name=type" json:"type,omitempty"`
	TermRegex    []byte                      `protobuf:"bytes,13,opt,name=term_regex" json:"term_regex,omitempty"`
	// Whether to use pagination sort for non-paginated queries
	PaginationSort   *bool  `protobuf:"varint,14,opt,name=pagination_sort" json:"pagination_sort,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbIndexReq) Reset()                    { *m = RpbIndexReq{} }
func (m *RpbIndexReq) String() string            { return proto.CompactTextString(m) }
func (*RpbIndexReq) ProtoMessage()               {}
func (*RpbIndexReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *RpbIndexReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbIndexReq) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *RpbIndexReq) GetQtype() RpbIndexReq_IndexQueryType {
	if m != nil && m.Qtype != nil {
		return *m.Qtype
	}
	return RpbIndexReq_eq
}

func (m *RpbIndexReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbIndexReq) GetRangeMin() []byte {
	if m != nil {
		return m.RangeMin
	}
	return nil
}

func (m *RpbIndexReq) GetRangeMax() []byte {
	if m != nil {
		return m.RangeMax
	}
	return nil
}

func (m *RpbIndexReq) GetReturnTerms() bool {
	if m != nil && m.ReturnTerms != nil {
		return *m.ReturnTerms
	}
	return false
}

func (m *RpbIndexReq) GetStream() bool {
	if m != nil && m.Stream != nil {
		return *m.Stream
	}
	return false
}

func (m *RpbIndexReq) GetMaxResults() uint32 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *RpbIndexReq) GetContinuation() []byte {
	if m != nil {
		return m.Continuation
	}
	return nil
}

func (m *RpbIndexReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbIndexReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *RpbIndexReq) GetTermRegex() []byte {
	if m != nil {
		return m.TermRegex
	}
	return nil
}

func (m *RpbIndexReq) GetPaginationSort() bool {
	if m != nil && m.PaginationSort != nil {
		return *m.PaginationSort
	}
	return false
}

// Secondary Index query response
type RpbIndexResp struct {
	Keys             [][]byte   `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Results          []*RpbPair `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Continuation     []byte     `protobuf:"bytes,3,opt,name=continuation" json:"continuation,omitempty"`
	Done             *bool      `protobuf:"varint,4,opt,name=done" json:"done,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *RpbIndexResp) Reset()                    { *m = RpbIndexResp{} }
func (m *RpbIndexResp) String() string            { return proto.CompactTextString(m) }
func (*RpbIndexResp) ProtoMessage()               {}
func (*RpbIndexResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *RpbIndexResp) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RpbIndexResp) GetResults() []*RpbPair {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *RpbIndexResp) GetContinuation() []byte {
	if m != nil {
		return m.Continuation
	}
	return nil
}

func (m *RpbIndexResp) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

// added solely for riak_cs currently
// for folding over a bucket and returning
// objects.
type RpbCSBucketReq struct {
	Bucket           []byte  `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	StartKey         []byte  `protobuf:"bytes,2,req,name=start_key" json:"start_key,omitempty"`
	EndKey           []byte  `protobuf:"bytes,3,opt,name=end_key" json:"end_key,omitempty"`
	StartIncl        *bool   `protobuf:"varint,4,opt,name=start_incl,def=1" json:"start_incl,omitempty"`
	EndIncl          *bool   `protobuf:"varint,5,opt,name=end_incl,def=0" json:"end_incl,omitempty"`
	Continuation     []byte  `protobuf:"bytes,6,opt,name=continuation" json:"continuation,omitempty"`
	MaxResults       *uint32 `protobuf:"varint,7,opt,name=max_results" json:"max_results,omitempty"`
	Timeout          *uint32 `protobuf:"varint,8,opt,name=timeout" json:"timeout,omitempty"`
	Type             []byte  `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbCSBucketReq) Reset()                    { *m = RpbCSBucketReq{} }
func (m *RpbCSBucketReq) String() string            { return proto.CompactTextString(m) }
func (*RpbCSBucketReq) ProtoMessage()               {}
func (*RpbCSBucketReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

const Default_RpbCSBucketReq_StartIncl bool = true
const Default_RpbCSBucketReq_EndIncl bool = false

func (m *RpbCSBucketReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbCSBucketReq) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *RpbCSBucketReq) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *RpbCSBucketReq) GetStartIncl() bool {
	if m != nil && m.StartIncl != nil {
		return *m.StartIncl
	}
	return Default_RpbCSBucketReq_StartIncl
}

func (m *RpbCSBucketReq) GetEndIncl() bool {
	if m != nil && m.EndIncl != nil {
		return *m.EndIncl
	}
	return Default_RpbCSBucketReq_EndIncl
}

func (m *RpbCSBucketReq) GetContinuation() []byte {
	if m != nil {
		return m.Continuation
	}
	return nil
}

func (m *RpbCSBucketReq) GetMaxResults() uint32 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *RpbCSBucketReq) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *RpbCSBucketReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// return for CS bucket fold
type RpbCSBucketResp struct {
	Objects          []*RpbIndexObject `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	Continuation     []byte            `protobuf:"bytes,2,opt,name=continuation" json:"continuation,omitempty"`
	Done             *bool             `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RpbCSBucketResp) Reset()                    { *m = RpbCSBucketResp{} }
func (m *RpbCSBucketResp) String() string            { return proto.CompactTextString(m) }
func (*RpbCSBucketResp) ProtoMessage()               {}
func (*RpbCSBucketResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *RpbCSBucketResp) GetObjects() []*RpbIndexObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *RpbCSBucketResp) GetContinuation() []byte {
	if m != nil {
		return m.Continuation
	}
	return nil
}

func (m *RpbCSBucketResp) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

type RpbIndexObject struct {
	Key              []byte      `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Object           *RpbGetResp `protobuf:"bytes,2,req,name=object" json:"object,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RpbIndexObject) Reset()                    { *m = RpbIndexObject{} }
func (m *RpbIndexObject) String() string            { return proto.CompactTextString(m) }
func (*RpbIndexObject) ProtoMessage()               {}
func (*RpbIndexObject) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *RpbIndexObject) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbIndexObject) GetObject() *RpbGetResp {
	if m != nil {
		return m.Object
	}
	return nil
}

// Content message included in get/put responses
// Holds the value and associated metadata
type RpbContent struct {
	Value            []byte     `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	ContentType      []byte     `protobuf:"bytes,2,opt,name=content_type" json:"content_type,omitempty"`
	Charset          []byte     `protobuf:"bytes,3,opt,name=charset" json:"charset,omitempty"`
	ContentEncoding  []byte     `protobuf:"bytes,4,opt,name=content_encoding" json:"content_encoding,omitempty"`
	Vtag             []byte     `protobuf:"bytes,5,opt,name=vtag" json:"vtag,omitempty"`
	Links            []*RpbLink `protobuf:"bytes,6,rep,name=links" json:"links,omitempty"`
	LastMod          *uint32    `protobuf:"varint,7,opt,name=last_mod" json:"last_mod,omitempty"`
	LastModUsecs     *uint32    `protobuf:"varint,8,opt,name=last_mod_usecs" json:"last_mod_usecs,omitempty"`
	Usermeta         []*RpbPair `protobuf:"bytes,9,rep,name=usermeta" json:"usermeta,omitempty"`
	Indexes          []*RpbPair `protobuf:"bytes,10,rep,name=indexes" json:"indexes,omitempty"`
	Deleted          *bool      `protobuf:"varint,11,opt,name=deleted" json:"deleted,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *RpbContent) Reset()                    { *m = RpbContent{} }
func (m *RpbContent) String() string            { return proto.CompactTextString(m) }
func (*RpbContent) ProtoMessage()               {}
func (*RpbContent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *RpbContent) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RpbContent) GetContentType() []byte {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *RpbContent) GetCharset() []byte {
	if m != nil {
		return m.Charset
	}
	return nil
}

func (m *RpbContent) GetContentEncoding() []byte {
	if m != nil {
		return m.ContentEncoding
	}
	return nil
}

func (m *RpbContent) GetVtag() []byte {
	if m != nil {
		return m.Vtag
	}
	return nil
}

func (m *RpbContent) GetLinks() []*RpbLink {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *RpbContent) GetLastMod() uint32 {
	if m != nil && m.LastMod != nil {
		return *m.LastMod
	}
	return 0
}

func (m *RpbContent) GetLastModUsecs() uint32 {
	if m != nil && m.LastModUsecs != nil {
		return *m.LastModUsecs
	}
	return 0
}

func (m *RpbContent) GetUsermeta() []*RpbPair {
	if m != nil {
		return m.Usermeta
	}
	return nil
}

func (m *RpbContent) GetIndexes() []*RpbPair {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *RpbContent) GetDeleted() bool {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return false
}

// Link metadata
type RpbLink struct {
	Bucket           []byte `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Key              []byte `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Tag              []byte `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbLink) Reset()                    { *m = RpbLink{} }
func (m *RpbLink) String() string            { return proto.CompactTextString(m) }
func (*RpbLink) ProtoMessage()               {}
func (*RpbLink) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *RpbLink) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbLink) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbLink) GetTag() []byte {
	if m != nil {
		return m.Tag
	}
	return nil
}

// Counter update request
type RpbCounterUpdateReq struct {
	Bucket           []byte  `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Key              []byte  `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	Amount           *int64  `protobuf:"zigzag64,3,req,name=amount" json:"amount,omitempty"`
	W                *uint32 `protobuf:"varint,4,opt,name=w" json:"w,omitempty"`
	Dw               *uint32 `protobuf:"varint,5,opt,name=dw" json:"dw,omitempty"`
	Pw               *uint32 `protobuf:"varint,6,opt,name=pw" json:"pw,omitempty"`
	Returnvalue      *bool   `protobuf:"varint,7,opt,name=returnvalue" json:"returnvalue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbCounterUpdateReq) Reset()                    { *m = RpbCounterUpdateReq{} }
func (m *RpbCounterUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*RpbCounterUpdateReq) ProtoMessage()               {}
func (*RpbCounterUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *RpbCounterUpdateReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbCounterUpdateReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbCounterUpdateReq) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *RpbCounterUpdateReq) GetW() uint32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *RpbCounterUpdateReq) GetDw() uint32 {
	if m != nil && m.Dw != nil {
		return *m.Dw
	}
	return 0
}

func (m *RpbCounterUpdateReq) GetPw() uint32 {
	if m != nil && m.Pw != nil {
		return *m.Pw
	}
	return 0
}

func (m *RpbCounterUpdateReq) GetReturnvalue() bool {
	if m != nil && m.Returnvalue != nil {
		return *m.Returnvalue
	}
	return false
}

// Counter update response? No message | error response
type RpbCounterUpdateResp struct {
	Value            *int64 `protobuf:"zigzag64,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbCounterUpdateResp) Reset()                    { *m = RpbCounterUpdateResp{} }
func (m *RpbCounterUpdateResp) String() string            { return proto.CompactTextString(m) }
func (*RpbCounterUpdateResp) ProtoMessage()               {}
func (*RpbCounterUpdateResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *RpbCounterUpdateResp) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// counter value
type RpbCounterGetReq struct {
	Bucket           []byte  `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Key              []byte  `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	R                *uint32 `protobuf:"varint,3,opt,name=r" json:"r,omitempty"`
	Pr               *uint32 `protobuf:"varint,4,opt,name=pr" json:"pr,omitempty"`
	BasicQuorum      *bool   `protobuf:"varint,5,opt,name=basic_quorum" json:"basic_quorum,omitempty"`
	NotfoundOk       *bool   `protobuf:"varint,6,opt,name=notfound_ok" json:"notfound_ok,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpbCounterGetReq) Reset()                    { *m = RpbCounterGetReq{} }
func (m *RpbCounterGetReq) String() string            { return proto.CompactTextString(m) }
func (*RpbCounterGetReq) ProtoMessage()               {}
func (*RpbCounterGetReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *RpbCounterGetReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbCounterGetReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbCounterGetReq) GetR() uint32 {
	if m != nil && m.R != nil {
		return *m.R
	}
	return 0
}

func (m *RpbCounterGetReq) GetPr() uint32 {
	if m != nil && m.Pr != nil {
		return *m.Pr
	}
	return 0
}

func (m *RpbCounterGetReq) GetBasicQuorum() bool {
	if m != nil && m.BasicQuorum != nil {
		return *m.BasicQuorum
	}
	return false
}

func (m *RpbCounterGetReq) GetNotfoundOk() bool {
	if m != nil && m.NotfoundOk != nil {
		return *m.NotfoundOk
	}
	return false
}

// Counter value response
type RpbCounterGetResp struct {
	Value            *int64 `protobuf:"zigzag64,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbCounterGetResp) Reset()                    { *m = RpbCounterGetResp{} }
func (m *RpbCounterGetResp) String() string            { return proto.CompactTextString(m) }
func (*RpbCounterGetResp) ProtoMessage()               {}
func (*RpbCounterGetResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *RpbCounterGetResp) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// Get bucket-key preflist request
type RpbGetBucketKeyPreflistReq struct {
	Bucket           []byte `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Key              []byte `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	Type             []byte `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbGetBucketKeyPreflistReq) Reset()                    { *m = RpbGetBucketKeyPreflistReq{} }
func (m *RpbGetBucketKeyPreflistReq) String() string            { return proto.CompactTextString(m) }
func (*RpbGetBucketKeyPreflistReq) ProtoMessage()               {}
func (*RpbGetBucketKeyPreflistReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *RpbGetBucketKeyPreflistReq) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *RpbGetBucketKeyPreflistReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RpbGetBucketKeyPreflistReq) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

// Get bucket-key preflist response
type RpbGetBucketKeyPreflistResp struct {
	Preflist         []*RpbBucketKeyPreflistItem `protobuf:"bytes,1,rep,name=preflist" json:"preflist,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *RpbGetBucketKeyPreflistResp) Reset()                    { *m = RpbGetBucketKeyPreflistResp{} }
func (m *RpbGetBucketKeyPreflistResp) String() string            { return proto.CompactTextString(m) }
func (*RpbGetBucketKeyPreflistResp) ProtoMessage()               {}
func (*RpbGetBucketKeyPreflistResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *RpbGetBucketKeyPreflistResp) GetPreflist() []*RpbBucketKeyPreflistItem {
	if m != nil {
		return m.Preflist
	}
	return nil
}

// Preflist item
type RpbBucketKeyPreflistItem struct {
	Partition        *int64 `protobuf:"varint,1,req,name=partition" json:"partition,omitempty"`
	Node             []byte `protobuf:"bytes,2,req,name=node" json:"node,omitempty"`
	Primary          *bool  `protobuf:"varint,3,req,name=primary" json:"primary,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RpbBucketKeyPreflistItem) Reset()                    { *m = RpbBucketKeyPreflistItem{} }
func (m *RpbBucketKeyPreflistItem) String() string            { return proto.CompactTextString(m) }
func (*RpbBucketKeyPreflistItem) ProtoMessage()               {}
func (*RpbBucketKeyPreflistItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *RpbBucketKeyPreflistItem) GetPartition() int64 {
	if m != nil && m.Partition != nil {
		return *m.Partition
	}
	return 0
}

func (m *RpbBucketKeyPreflistItem) GetNode() []byte {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *RpbBucketKeyPreflistItem) GetPrimary() bool {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return false
}

func init() {
	proto.RegisterType((*RpbGetClientIdResp)(nil), "protobuf.RpbGetClientIdResp")
	proto.RegisterType((*RpbSetClientIdReq)(nil), "protobuf.RpbSetClientIdReq")
	proto.RegisterType((*RpbGetReq)(nil), "protobuf.RpbGetReq")
	proto.RegisterType((*RpbGetResp)(nil), "protobuf.RpbGetResp")
	proto.RegisterType((*RpbPutReq)(nil), "protobuf.RpbPutReq")
	proto.RegisterType((*RpbPutResp)(nil), "protobuf.RpbPutResp")
	proto.RegisterType((*RpbDelReq)(nil), "protobuf.RpbDelReq")
	proto.RegisterType((*RpbListBucketsReq)(nil), "protobuf.RpbListBucketsReq")
	proto.RegisterType((*RpbListBucketsResp)(nil), "protobuf.RpbListBucketsResp")
	proto.RegisterType((*RpbListKeysReq)(nil), "protobuf.RpbListKeysReq")
	proto.RegisterType((*RpbListKeysResp)(nil), "protobuf.RpbListKeysResp")
	proto.RegisterType((*RpbMapRedReq)(nil), "protobuf.RpbMapRedReq")
	proto.RegisterType((*RpbMapRedResp)(nil), "protobuf.RpbMapRedResp")
	proto.RegisterType((*RpbIndexReq)(nil), "protobuf.RpbIndexReq")
	proto.RegisterType((*RpbIndexResp)(nil), "protobuf.RpbIndexResp")
	proto.RegisterType((*RpbCSBucketReq)(nil), "protobuf.RpbCSBucketReq")
	proto.RegisterType((*RpbCSBucketResp)(nil), "protobuf.RpbCSBucketResp")
	proto.RegisterType((*RpbIndexObject)(nil), "protobuf.RpbIndexObject")
	proto.RegisterType((*RpbContent)(nil), "protobuf.RpbContent")
	proto.RegisterType((*RpbLink)(nil), "protobuf.RpbLink")
	proto.RegisterType((*RpbCounterUpdateReq)(nil), "protobuf.RpbCounterUpdateReq")
	proto.RegisterType((*RpbCounterUpdateResp)(nil), "protobuf.RpbCounterUpdateResp")
	proto.RegisterType((*RpbCounterGetReq)(nil), "protobuf.RpbCounterGetReq")
	proto.RegisterType((*RpbCounterGetResp)(nil), "protobuf.RpbCounterGetResp")
	proto.RegisterType((*RpbGetBucketKeyPreflistReq)(nil), "protobuf.RpbGetBucketKeyPreflistReq")
	proto.RegisterType((*RpbGetBucketKeyPreflistResp)(nil), "protobuf.RpbGetBucketKeyPreflistResp")
	proto.RegisterType((*RpbBucketKeyPreflistItem)(nil), "protobuf.RpbBucketKeyPreflistItem")
	proto.RegisterEnum("protobuf.RpbIndexReq_IndexQueryType", RpbIndexReq_IndexQueryType_name, RpbIndexReq_IndexQueryType_value)
}

var fileDescriptor1 = []byte{
	// 1206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x96, 0xcb, 0x72, 0xe3, 0x44,
	0x17, 0x80, 0x7f, 0xdf, 0x62, 0xf9, 0xf8, 0x12, 0x47, 0x93, 0x9f, 0x51, 0x0d, 0x9b, 0x94, 0x32,
	0x03, 0x61, 0x81, 0x17, 0x19, 0xd8, 0xcc, 0x02, 0xaa, 0x12, 0xaa, 0xa6, 0x52, 0x13, 0x8a, 0x90,
	0x00, 0x5b, 0x21, 0x4b, 0xed, 0x44, 0x58, 0x37, 0x77, 0xb7, 0x92, 0x31, 0x4f, 0xc1, 0x9b, 0xf0,
	0x0c, 0x14, 0xef, 0xc0, 0x3b, 0xf0, 0x16, 0x9c, 0x3e, 0xdd, 0x8a, 0x25, 0x5f, 0x48, 0x15, 0x45,
	0xb1, 0xb2, 0xd5, 0x7d, 0x74, 0x2e, 0xdf, 0xb9, 0x09, 0x86, 0x3c, 0xf2, 0xe7, 0xde, 0xfc, 0x7e,
	0x92, 0xf3, 0x4c, 0x66, 0xb6, 0x45, 0x3f, 0xd3, 0x62, 0xf6, 0x02, 0xd4, 0x85, 0x3e, 0x75, 0x3f,
	0x06, 0xfb, 0x3a, 0x9f, 0xbe, 0x65, 0xf2, 0x3c, 0x8e, 0x58, 0x2a, 0x2f, 0xc2, 0x6b, 0x26, 0x72,
	0xfb, 0x00, 0x7a, 0x01, 0x3d, 0x7b, 0x51, 0xe8, 0x34, 0x8e, 0x9a, 0x27, 0x03, 0xf7, 0x23, 0x38,
	0x40, 0xc1, 0x9b, 0xaa, 0xe0, 0x62, 0x9b, 0xdc, 0x9f, 0x0d, 0xe8, 0x69, 0x8d, 0x4a, 0x60, 0x04,
	0x7b, 0xd3, 0x22, 0x98, 0x33, 0xa9, 0x6f, 0xed, 0x3e, 0xb4, 0xe6, 0x6c, 0xe9, 0x34, 0xe9, 0xa1,
	0x07, 0x0d, 0xee, 0xb4, 0x8e, 0x1a, 0x27, 0x43, 0x1b, 0xa0, 0x99, 0x73, 0xa7, 0x4d, 0xff, 0x0f,
	0x61, 0x30, 0xf5, 0x45, 0x14, 0x78, 0x8b, 0x22, 0xe3, 0x45, 0xe2, 0x74, 0xf0, 0xd4, 0xb2, 0x9f,
	0x41, 0x3f, 0xcd, 0xe4, 0x2c, 0x2b, 0xd2, 0xd0, 0xcb, 0xe6, 0xce, 0x5e, 0x79, 0x18, 0xcd, 0xbc,
	0x24, 0x0b, 0xa3, 0x59, 0xc4, 0x42, 0xa7, 0x8b, 0x87, 0x03, 0x7b, 0x00, 0xed, 0x3b, 0xe6, 0x87,
	0x8e, 0x45, 0x22, 0xff, 0x87, 0x61, 0xc8, 0x62, 0x26, 0x59, 0x78, 0x1f, 0xc4, 0x59, 0x30, 0x77,
	0x7a, 0x74, 0xbc, 0x0f, 0x5d, 0x19, 0x25, 0x2c, 0x2b, 0xa4, 0x03, 0x64, 0x15, 0xe5, 0x44, 0x9c,
	0xe5, 0xf9, 0xb2, 0x34, 0xdb, 0x27, 0xb9, 0x21, 0x74, 0x52, 0xef, 0xde, 0x8f, 0x9d, 0x01, 0x49,
	0xa1, 0x6e, 0xb9, 0xcc, 0x99, 0x33, 0x54, 0x96, 0xdc, 0x1f, 0x00, 0xca, 0x50, 0x11, 0xda, 0x2b,
	0xe8, 0x06, 0x59, 0x2a, 0x91, 0x06, 0x06, 0xdb, 0x3a, 0xe9, 0x9f, 0x1e, 0x4e, 0x4a, 0xe4, 0x13,
	0x14, 0x3b, 0xd7, 0x77, 0x0a, 0x89, 0xf1, 0xa4, 0x49, 0xee, 0x22, 0xc3, 0x22, 0x0d, 0xee, 0xfc,
	0xf4, 0x16, 0x23, 0x50, 0x34, 0x2c, 0xf7, 0xd7, 0x26, 0x31, 0xbc, 0x2a, 0xfe, 0x9e, 0xa1, 0x7a,
	0x7b, 0xa5, 0xad, 0x45, 0xcf, 0x15, 0x27, 0xda, 0x28, 0xbd, 0xcb, 0x09, 0x44, 0xff, 0x40, 0x60,
	0x09, 0x7d, 0xf8, 0x40, 0x3c, 0x87, 0x8a, 0x27, 0x67, 0xb2, 0xe0, 0xa9, 0x37, 0xcd, 0xc2, 0x25,
	0xf1, 0xb4, 0x28, 0x37, 0x0f, 0x44, 0x73, 0x68, 0x3f, 0x87, 0x7d, 0x04, 0x8e, 0x89, 0x58, 0x41,
	0xef, 0x95, 0x98, 0xe9, 0x22, 0x65, 0x5e, 0xe2, 0xcb, 0xe0, 0x8e, 0xa8, 0x5a, 0x15, 0x85, 0x94,
	0x92, 0xfe, 0x3a, 0xfb, 0x47, 0xaa, 0x98, 0x70, 0x41, 0x54, 0xad, 0xcd, 0x4c, 0x8c, 0xea, 0x99,
	0xd8, 0xaf, 0x65, 0x62, 0x4c, 0x99, 0xb8, 0xa2, 0x4c, 0x10, 0xb0, 0x7f, 0x9e, 0x09, 0x03, 0x96,
	0x40, 0xba, 0xbf, 0xeb, 0x3a, 0xfe, 0x8a, 0xc5, 0x4f, 0xd6, 0x31, 0x02, 0xe2, 0x0f, 0xa6, 0x90,
	0x57, 0x3a, 0xdb, 0xa4, 0x93, 0x6a, 0x5c, 0x83, 0x26, 0xe6, 0x7b, 0x95, 0x72, 0xef, 0x3e, 0xfe,
	0x2f, 0xf1, 0xea, 0x5c, 0xf4, 0xe8, 0xff, 0xbf, 0x52, 0xa1, 0x67, 0xd4, 0xb5, 0x97, 0x91, 0x90,
	0x67, 0xe4, 0xbe, 0x50, 0xc1, 0x54, 0x34, 0x37, 0x4a, 0xa7, 0x85, 0xe4, 0xcc, 0x4f, 0x08, 0x84,
	0xf5, 0xa8, 0x43, 0x93, 0x78, 0x4d, 0x23, 0xa2, 0xa6, 0x03, 0x19, 0xa3, 0x12, 0x4d, 0x44, 0x10,
	0x63, 0x6a, 0xbb, 0x10, 0xd3, 0xaf, 0x55, 0xb8, 0x5f, 0xc2, 0xc8, 0xbc, 0xf4, 0x8e, 0x2d, 0xc5,
	0x36, 0x84, 0x15, 0x2f, 0x9a, 0x35, 0xcf, 0xb5, 0xd5, 0x4f, 0x61, 0xbf, 0xa6, 0x00, 0x4d, 0xa2,
	0x00, 0x42, 0xdf, 0x6e, 0xef, 0x73, 0x18, 0xa0, 0xf8, 0xd7, 0x7e, 0x7e, 0xcd, 0x42, 0x13, 0x23,
	0x67, 0x8b, 0x82, 0x89, 0xd2, 0x1c, 0x4e, 0x15, 0x53, 0x13, 0x1e, 0x59, 0xa1, 0xd4, 0xb9, 0x5f,
	0xc0, 0xb0, 0xf2, 0x1a, 0xda, 0x40, 0x9a, 0xf9, 0x9d, 0x2f, 0x98, 0x21, 0x33, 0x06, 0x8b, 0xe3,
	0x71, 0x96, 0x0a, 0x66, 0x8a, 0xa4, 0x34, 0xab, 0x3b, 0xf5, 0x8f, 0x26, 0xf4, 0x51, 0xc1, 0x45,
	0x1a, 0xb2, 0xf7, 0xdb, 0x82, 0x44, 0x75, 0x91, 0xba, 0x33, 0x95, 0xf2, 0x1a, 0x3a, 0x0b, 0x13,
	0x63, 0xf3, 0x64, 0x74, 0xfa, 0xb2, 0x56, 0x96, 0xa5, 0x92, 0x09, 0xfd, 0xf9, 0xb6, 0x60, 0x7c,
	0xf9, 0x1d, 0xca, 0x96, 0xb5, 0xd6, 0x2e, 0xa7, 0x05, 0x57, 0xa3, 0xc2, 0x4b, 0xa2, 0x94, 0xea,
	0xaa, 0x7a, 0xe4, 0xbf, 0xa7, 0xfa, 0xa2, 0x60, 0x4d, 0xdb, 0x49, 0xc6, 0x13, 0x61, 0x1a, 0x79,
	0x95, 0x66, 0xab, 0x6c, 0x4e, 0x7c, 0xc5, 0xc3, 0x00, 0x8b, 0x18, 0xd3, 0xd8, 0x2b, 0xa7, 0xaf,
	0xe2, 0x14, 0xa5, 0x85, 0x2f, 0xa3, 0x2c, 0xa5, 0xda, 0xab, 0x25, 0xab, 0x5f, 0x4b, 0xd6, 0x80,
	0xae, 0xb1, 0x70, 0x95, 0x21, 0x54, 0x75, 0x8b, 0xb1, 0x52, 0xe9, 0xa9, 0x51, 0x91, 0xfb, 0xb7,
	0x51, 0x4a, 0x6a, 0x3c, 0x91, 0x71, 0xa9, 0x1b, 0xd9, 0x3d, 0x86, 0xd1, 0x5a, 0x84, 0x7b, 0xd0,
	0x64, 0x8b, 0xf1, 0xff, 0xb0, 0x43, 0x3a, 0x14, 0xc9, 0xb8, 0xe1, 0x86, 0x94, 0x4f, 0x83, 0x64,
	0x23, 0xf7, 0xae, 0xca, 0xae, 0xf6, 0xba, 0x49, 0x0d, 0x7e, 0x50, 0x23, 0x79, 0xe5, 0x47, 0x7c,
	0x23, 0x90, 0x56, 0x2d, 0x7d, 0x6d, 0x72, 0xe5, 0xb7, 0x06, 0x95, 0xe9, 0xf9, 0x8d, 0xae, 0xec,
	0x6d, 0x19, 0x44, 0xba, 0x42, 0xfa, 0x5c, 0x7a, 0xab, 0x7e, 0x47, 0x18, 0x0c, 0xb7, 0xd0, 0xe3,
	0xac, 0xb0, 0x1d, 0x00, 0x2d, 0x13, 0xa5, 0x41, 0xac, 0x55, 0xbf, 0x69, 0x4b, 0x5e, 0x30, 0x84,
	0x60, 0x29, 0x51, 0x3a, 0xa7, 0x3d, 0xf6, 0xa6, 0x33, 0xf3, 0x63, 0xc1, 0x36, 0xbc, 0xd3, 0x79,
	0x5b, 0xcb, 0x48, 0x77, 0x7d, 0x10, 0x58, 0x35, 0xf6, 0x3d, 0x6a, 0x94, 0x1f, 0xa9, 0x51, 0x56,
	0x21, 0x20, 0xac, 0x4f, 0xa0, 0x9b, 0x4d, 0x7f, 0x62, 0x81, 0xe9, 0xcd, 0xfe, 0xa9, 0xb3, 0x59,
	0x68, 0xdf, 0x90, 0xc0, 0x86, 0x1f, 0xdb, 0x8a, 0xfc, 0x9c, 0x20, 0x55, 0xdf, 0x32, 0x25, 0xa9,
	0x09, 0xbd, 0x84, 0x3d, 0x6d, 0x8d, 0xf0, 0xac, 0x0f, 0x5b, 0xb3, 0x1d, 0xdd, 0x5f, 0x9a, 0x34,
	0xa2, 0xcb, 0xd9, 0x8b, 0x8d, 0x81, 0x33, 0xab, 0x60, 0x3b, 0xbb, 0xd3, 0x54, 0x1d, 0x2e, 0x46,
	0x2e, 0x30, 0x19, 0x25, 0xe8, 0x71, 0x29, 0xc6, 0xd2, 0x00, 0x37, 0x50, 0x7a, 0x6b, 0xfa, 0x02,
	0x3d, 0xbe, 0x97, 0xfe, 0xad, 0x69, 0x89, 0x23, 0xe8, 0xc4, 0x51, 0x3a, 0x17, 0x88, 0x75, 0xb3,
	0x3a, 0x2e, 0xf1, 0x46, 0x35, 0x76, 0xec, 0x0b, 0x5a, 0x63, 0x06, 0xf3, 0x07, 0x30, 0x2a, 0x4f,
	0xbc, 0x42, 0xb0, 0x40, 0x18, 0xda, 0xc7, 0x60, 0xe1, 0x23, 0x4f, 0x98, 0xf4, 0x91, 0xf8, 0x8e,
	0x62, 0xc3, 0x82, 0xa4, 0x3e, 0x67, 0x02, 0x1b, 0x66, 0x87, 0x0c, 0x46, 0x63, 0xbe, 0x44, 0xf4,
	0xe4, 0xc6, 0xc1, 0xda, 0x2d, 0xdd, 0xa9, 0x56, 0x5d, 0x63, 0x7d, 0xc7, 0xe3, 0x83, 0x0a, 0x4d,
	0xcf, 0xc5, 0x9f, 0xe1, 0x19, 0x61, 0x2c, 0x10, 0x03, 0xff, 0x3e, 0x0f, 0x7d, 0xc9, 0x9e, 0x5c,
	0x50, 0x78, 0xe9, 0x27, 0xea, 0x0d, 0x9a, 0x3b, 0xb6, 0xde, 0x44, 0xed, 0xca, 0xc6, 0xe9, 0x54,
	0x36, 0xd1, 0xda, 0x97, 0x80, 0xce, 0x12, 0x0d, 0x10, 0xf7, 0x15, 0x1c, 0x6e, 0xda, 0xd6, 0x43,
	0xb3, 0x4c, 0x66, 0xe3, 0xc4, 0x76, 0x17, 0x30, 0x5e, 0x89, 0xfd, 0x27, 0x1f, 0x82, 0xae, 0x4b,
	0x7b, 0xae, 0x6a, 0x72, 0xd3, 0xad, 0xb7, 0xf0, 0x42, 0xd7, 0xa3, 0xee, 0x14, 0x5c, 0x2b, 0x57,
	0x9c, 0xcd, 0x62, 0xdc, 0x30, 0x4f, 0x3a, 0x58, 0x5f, 0x4d, 0x37, 0xf0, 0xe1, 0x4e, 0x45, 0x68,
	0xf6, 0x33, 0xc0, 0x4f, 0x6d, 0xfd, 0x6c, 0xda, 0xcf, 0xad, 0x15, 0xc3, 0xc6, 0x5b, 0x17, 0x92,
	0x25, 0xee, 0x25, 0x38, 0xbb, 0xee, 0xd4, 0x0c, 0xca, 0x71, 0xbc, 0x44, 0xd4, 0xa1, 0xca, 0xbd,
	0x96, 0xf2, 0x28, 0xcd, 0x42, 0xb6, 0x9a, 0x48, 0x39, 0x8f, 0x12, 0x9f, 0x2f, 0x29, 0xc3, 0xd6,
	0xd9, 0x31, 0x3c, 0x0f, 0xb2, 0x64, 0x82, 0xf8, 0xee, 0xb2, 0xc9, 0xea, 0x73, 0x1f, 0x3d, 0x38,
	0xb3, 0xae, 0xf1, 0xf1, 0xdd, 0xfd, 0xd5, 0xd9, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x3c,
	0x09, 0xc7, 0x21, 0x0c, 0x00, 0x00,
}
